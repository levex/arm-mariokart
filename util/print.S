
/* Prints a matrix over UART. Arguments:
 * r0 - pointer to matrix
 */
.globl print_matrix
print_matrix:
    push {r1, lr}

    mov r1, r0

    // Autogenerated using vim, don't modify
    ldr r0, [r1, #0]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    bl uart_send_byte
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #4]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #8]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #12]
    bl uart_send_int_hex
    bl uart_send_newline

    ldr r0, [r1, #16]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #20]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #24]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #28]
    bl uart_send_int_hex
    bl uart_send_newline

    ldr r0, [r1, #32]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #36]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #40]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #44]
    bl uart_send_int_hex
    bl uart_send_newline

    ldr r0, [r1, #48]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #52]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #56]
    bl uart_send_int_hex
    mov r0, #' '
    bl uart_send_byte
    ldr r0, [r1, #60]
    bl uart_send_int_hex
    bl uart_send_newline

    pop {r1, pc}

/* r0 -> vertex */
.globl print_vertex
print_vertex:
    push {r0-r1, lr}

    mov r1, r0

    ldr r0, [r0]
    bl uart_send_int_dec

    mov r0, #' '
    bl uart_send_byte
    add r0, r1, #4
    ldr r0, [r0]
    bl uart_send_int_dec

    mov r0, #' '
    bl uart_send_byte
    add r0, r1, #8
    ldr r0, [r0]
    bl uart_send_int_dec

    mov r0, #' '
    bl uart_send_byte
    add r0, r1, #12
    ldr r0, [r0]
    bl uart_send_int_dec

    bl uart_send_newline
    pop {r0-r1, pc}
